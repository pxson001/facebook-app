package com.facebook.malware.permissions;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import com.facebook.analytics.AnalyticsLoggerMethodAutoProvider;
import com.facebook.analytics.event.HoneyClientEventFast;
import com.facebook.analytics.logger.AnalyticsLogger;
import com.facebook.conditionalworker.ConditionalWorker;
import com.facebook.conditionalworker.ConditionalWorkerRunner;
import com.facebook.content.PermissionChecks;
import com.facebook.debug.log.BLog;
import com.facebook.inject.InjectorLike;
import com.facebook.prefs.shared.FbSharedPreferences;
import com.facebook.prefs.shared.FbSharedPreferencesImpl;
import com.facebook.prefs.shared.PrefKey;
import com.facebook.prefs.shared.SharedPrefKeys;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@Singleton
/* compiled from: insertContactIntoDatabase (%s) */
public class MalwareDetector implements ConditionalWorker {
    static final PrefKey f10311a = ((PrefKey) SharedPrefKeys.c.a("malware_scan_finished"));
    private static volatile MalwareDetector f10312e;
    private final AnalyticsLogger f10313b;
    private final FbSharedPreferences f10314c;
    private final Context f10315d;

    public static com.facebook.malware.permissions.MalwareDetector m10811a(@javax.annotation.Nullable com.facebook.inject.InjectorLike r5) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.JadxRuntimeException: Can't find immediate dominator for block B:24:0x003b in {17, 19, 21, 23, 26, 28} preds:[]
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.computeDominators(BlockProcessor.java:129)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.processBlocksTree(BlockProcessor.java:48)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.rerun(BlockProcessor.java:44)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.visit(BlockFinallyExtract.java:57)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.ProcessClass.process(ProcessClass.java:37)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
*/
        /*
        r0 = f10312e;
        if (r0 != 0) goto L_0x0032;
    L_0x0004:
        r1 = com.facebook.malware.permissions.MalwareDetector.class;
        monitor-enter(r1);
        r0 = f10312e;	 Catch:{ all -> 0x003a }
        if (r0 != 0) goto L_0x0031;	 Catch:{ all -> 0x003a }
    L_0x000b:
        if (r5 == 0) goto L_0x0031;	 Catch:{ all -> 0x003a }
    L_0x000d:
        r2 = com.facebook.inject.ScopeSet.a();	 Catch:{ all -> 0x003a }
        r3 = r2.b();	 Catch:{ all -> 0x003a }
        r0 = com.facebook.inject.SingletonScope.class;	 Catch:{ all -> 0x003a }
        r0 = r5.getInstance(r0);	 Catch:{ all -> 0x003a }
        r0 = (com.facebook.inject.SingletonScope) r0;	 Catch:{ all -> 0x003a }
        r4 = r0.enterScope();	 Catch:{ all -> 0x003a }
        r0 = r5.getApplicationInjector();	 Catch:{ all -> 0x0035 }
        r0 = m10815b(r0);	 Catch:{ all -> 0x0035 }
        f10312e = r0;	 Catch:{ all -> 0x0035 }
        com.facebook.inject.SingletonScope.a(r4);
        r2.c(r3);
    L_0x0031:
        monitor-exit(r1);	 Catch:{  }
    L_0x0032:
        r0 = f10312e;
        return r0;
    L_0x0035:
        r0 = move-exception;
        com.facebook.inject.SingletonScope.a(r4);	 Catch:{ all -> 0x0035 }
        throw r0;	 Catch:{ all -> 0x0035 }
    L_0x003a:
        r0 = move-exception;
        r2.c(r3);	 Catch:{ all -> 0x003a }
        throw r0;	 Catch:{ all -> 0x003a }
    L_0x003f:
        r0 = move-exception;
        monitor-exit(r1);	 Catch:{ all -> 0x003a }
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.facebook.malware.permissions.MalwareDetector.a(com.facebook.inject.InjectorLike):com.facebook.malware.permissions.MalwareDetector");
    }

    private static MalwareDetector m10815b(InjectorLike injectorLike) {
        return new MalwareDetector(AnalyticsLoggerMethodAutoProvider.a(injectorLike), (FbSharedPreferences) FbSharedPreferencesImpl.a(injectorLike), (Context) injectorLike.getInstance(Context.class));
    }

    @Inject
    public MalwareDetector(AnalyticsLogger analyticsLogger, FbSharedPreferences fbSharedPreferences, Context context) {
        this.f10313b = analyticsLogger;
        this.f10314c = fbSharedPreferences;
        this.f10315d = context;
    }

    private void m10812a(Context context) {
        this.f10314c.edit().putBoolean(f10311a, true).commit();
        try {
            List b = m10816b(context);
            if (b != null && !b.isEmpty()) {
                m10814a(b);
            }
        } catch (Exception e) {
            m10813a("Exception during complex: " + e.getMessage());
        }
    }

    public final boolean mo83a(ConditionalWorkerRunner conditionalWorkerRunner) {
        m10812a(this.f10315d);
        return true;
    }

    private List<PackageInfo> m10816b(Context context) {
        try {
            return PermissionChecks.m8082c(context);
        } catch (Exception e) {
            m10813a("Exception during normal: " + e.getMessage());
            return PermissionChecks.m8083d(context);
        }
    }

    private void m10813a(String str) {
        new StringBuilder("Logging error: ").append(str);
        HoneyClientEventFast a = this.f10313b.a("malware_transaction_exception_event", true);
        if (a.a()) {
            a.a("malware_detector");
            a.a("MalwareDetector", str);
            a.b();
        }
    }

    private void m10814a(List<PackageInfo> list) {
        try {
            JSONArray jSONArray = new JSONArray();
            for (PackageInfo packageInfo : list) {
                JSONObject jSONObject = new JSONObject();
                jSONObject.put("name", packageInfo.packageName);
                JSONArray jSONArray2 = new JSONArray();
                for (PackageItemInfo packageItemInfo : packageInfo.permissions) {
                    jSONArray2.put(packageItemInfo.name);
                }
                jSONObject.put("permissions", jSONArray2);
                jSONArray.put(jSONObject);
            }
            HoneyClientEventFast a = this.f10313b.a("android_malware_detected_event", true);
            if (a.a()) {
                a.a("malware_detector");
                a.a("description", jSONArray.toString());
                a.b();
            }
        } catch (JSONException e) {
            BLog.b("MalwareDetector", e.getMessage());
        }
    }
}
