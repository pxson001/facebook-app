package com.facebook.malware.scanner;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.PermissionInfo;
import android.content.pm.Signature;
import android.os.Build.VERSION;
import android.os.TransactionTooLargeException;
import com.facebook.analytics.AnalyticsLoggerMethodAutoProvider;
import com.facebook.analytics.logger.AnalyticsLogger;
import com.facebook.analytics.logger.HoneyClientEvent;
import com.facebook.common.errorreporting.AbstractFbErrorReporter;
import com.facebook.common.errorreporting.FbErrorReporterImpl;
import com.facebook.conditionalworker.ConditionalWorker;
import com.facebook.conditionalworker.ConditionalWorkerRunner;
import com.facebook.inject.InjectorLike;
import com.facebook.xconfig.core.XConfigReader;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import org.json.JSONArray;

@Singleton
/* compiled from: Unexpected serialization exception */
public class MalwareScanner implements ConditionalWorker {
    private static volatile MalwareScanner f10457e;
    private final AnalyticsLogger f10458a;
    private final Context f10459b;
    private final AbstractFbErrorReporter f10460c;
    private final XConfigReader f10461d;

    public static com.facebook.malware.scanner.MalwareScanner m10873a(@javax.annotation.Nullable com.facebook.inject.InjectorLike r5) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.JadxRuntimeException: Can't find immediate dominator for block B:24:0x003b in {17, 19, 21, 23, 26, 28} preds:[]
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.computeDominators(BlockProcessor.java:129)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.processBlocksTree(BlockProcessor.java:48)
	at jadx.core.dex.visitors.blocksmaker.BlockProcessor.rerun(BlockProcessor.java:44)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.visit(BlockFinallyExtract.java:57)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.ProcessClass.process(ProcessClass.java:37)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
*/
        /*
        r0 = f10457e;
        if (r0 != 0) goto L_0x0032;
    L_0x0004:
        r1 = com.facebook.malware.scanner.MalwareScanner.class;
        monitor-enter(r1);
        r0 = f10457e;	 Catch:{ all -> 0x003a }
        if (r0 != 0) goto L_0x0031;	 Catch:{ all -> 0x003a }
    L_0x000b:
        if (r5 == 0) goto L_0x0031;	 Catch:{ all -> 0x003a }
    L_0x000d:
        r2 = com.facebook.inject.ScopeSet.a();	 Catch:{ all -> 0x003a }
        r3 = r2.b();	 Catch:{ all -> 0x003a }
        r0 = com.facebook.inject.SingletonScope.class;	 Catch:{ all -> 0x003a }
        r0 = r5.getInstance(r0);	 Catch:{ all -> 0x003a }
        r0 = (com.facebook.inject.SingletonScope) r0;	 Catch:{ all -> 0x003a }
        r4 = r0.enterScope();	 Catch:{ all -> 0x003a }
        r0 = r5.getApplicationInjector();	 Catch:{ all -> 0x0035 }
        r0 = m10878b(r0);	 Catch:{ all -> 0x0035 }
        f10457e = r0;	 Catch:{ all -> 0x0035 }
        com.facebook.inject.SingletonScope.a(r4);
        r2.c(r3);
    L_0x0031:
        monitor-exit(r1);	 Catch:{  }
    L_0x0032:
        r0 = f10457e;
        return r0;
    L_0x0035:
        r0 = move-exception;
        com.facebook.inject.SingletonScope.a(r4);	 Catch:{ all -> 0x0035 }
        throw r0;	 Catch:{ all -> 0x0035 }
    L_0x003a:
        r0 = move-exception;
        r2.c(r3);	 Catch:{ all -> 0x003a }
        throw r0;	 Catch:{ all -> 0x003a }
    L_0x003f:
        r0 = move-exception;
        monitor-exit(r1);	 Catch:{ all -> 0x003a }
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.facebook.malware.scanner.MalwareScanner.a(com.facebook.inject.InjectorLike):com.facebook.malware.scanner.MalwareScanner");
    }

    private static MalwareScanner m10878b(InjectorLike injectorLike) {
        return new MalwareScanner(AnalyticsLoggerMethodAutoProvider.a(injectorLike), (Context) injectorLike.getInstance(Context.class), (AbstractFbErrorReporter) FbErrorReporterImpl.a(injectorLike), XConfigReader.a(injectorLike));
    }

    @Inject
    public MalwareScanner(AnalyticsLogger analyticsLogger, Context context, AbstractFbErrorReporter abstractFbErrorReporter, XConfigReader xConfigReader) {
        this.f10458a = analyticsLogger;
        this.f10459b = context;
        this.f10460c = abstractFbErrorReporter;
        this.f10461d = xConfigReader;
    }

    private void m10874a(Context context) {
        List b = m10879b(context);
        if (b != null && !b.isEmpty()) {
            m10877a(b);
        }
    }

    public final boolean m10880a(ConditionalWorkerRunner conditionalWorkerRunner) {
        m10874a(this.f10459b);
        return true;
    }

    private List<PackageInfo> m10879b(Context context) {
        List<PackageInfo> list = null;
        try {
            list = PackageInfoList.m10883a(context, 4160);
        } catch (TransactionTooLargeException e) {
            m10876a(e.getMessage());
            try {
                list = PackageInfoList.m10884b(context, 4160);
            } catch (InterruptedException e2) {
                m10876a(e2.getMessage());
            } catch (IOException e3) {
                m10876a(e3.getMessage());
            } catch (NameNotFoundException e4) {
                m10876a(e4.getMessage());
            }
        }
        return list;
    }

    private void m10876a(String str) {
        this.f10460c.a("MalwareScanner", str);
    }

    private void m10877a(List<PackageInfo> list) {
        for (PackageInfo a : list) {
            m10875a(a);
        }
    }

    private void m10875a(PackageInfo packageInfo) {
        JSONArray jSONArray;
        HoneyClientEvent honeyClientEvent = new HoneyClientEvent("android_malware_scanner_send_installed_packages_event");
        honeyClientEvent.b("name", packageInfo.packageName);
        ApplicationInfo applicationInfo = packageInfo.applicationInfo;
        if (applicationInfo != null) {
            honeyClientEvent.a("size", new File(applicationInfo.sourceDir).length());
            honeyClientEvent.a("target_sdk_version", applicationInfo.targetSdkVersion);
        }
        honeyClientEvent.b("version_name", packageInfo.versionName);
        honeyClientEvent.a("version_code", packageInfo.versionCode);
        try {
            if (this.f10461d.a(MalwareScannerXConfig.d, false)) {
                honeyClientEvent.b("md5_checksum_of_apk", MalwareScannerHashing.m10881a(applicationInfo));
            }
            if (this.f10461d.a(MalwareScannerXConfig.e, false)) {
                honeyClientEvent.b("sha1_checksum_of_apk", MalwareScannerHashing.m10882b(applicationInfo));
            }
        } catch (IOException e) {
            m10876a("Exception getting checksum of apk: " + e.getMessage());
        } catch (NoSuchAlgorithmException e2) {
            m10876a("Exception getting checksum of apk: " + e2.getMessage());
        }
        if (VERSION.SDK_INT >= 9) {
            honeyClientEvent.a("install_date", packageInfo.firstInstallTime);
            honeyClientEvent.a("last_update_time", packageInfo.lastUpdateTime);
        }
        String[] strArr = packageInfo.requestedPermissions;
        if (!(strArr == null || strArr.length == 0)) {
            jSONArray = new JSONArray();
            for (Object put : strArr) {
                jSONArray.put(put);
            }
            honeyClientEvent.b("requested_permissions", jSONArray.toString());
        }
        PermissionInfo[] permissionInfoArr = packageInfo.permissions;
        if (!(permissionInfoArr == null || permissionInfoArr.length == 0)) {
            jSONArray = new JSONArray();
            for (PackageItemInfo packageItemInfo : permissionInfoArr) {
                jSONArray.put(packageItemInfo.name);
            }
            honeyClientEvent.b("permissions", jSONArray.toString());
        }
        if (!(packageInfo.signatures == null || packageInfo.signatures.length == 0)) {
            JSONArray jSONArray2 = new JSONArray();
            for (Signature toCharsString : packageInfo.signatures) {
                jSONArray2.put(toCharsString.toCharsString());
            }
            honeyClientEvent.b("signature", jSONArray2.toString());
        }
        this.f10458a.a(honeyClientEvent);
    }
}
